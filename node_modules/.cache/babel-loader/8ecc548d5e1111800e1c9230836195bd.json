{"ast":null,"code":"var _jsxFileName = \"/Users/ilannohayon/dev/ITC/Micro Blog/micro-blogging-front-end-Ilann0/blog/src/components/TweetManager.jsx\";\nimport React from \"react\";\nimport TweetList from \"./TweetList\";\nimport CreateTweet from \"./CreateTweet\";\nimport { getTweets, postTweet } from '../lib/api';\nimport TweetManagerContext from \"../contexts/TweetManagerContext\";\n\nclass TweetManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: [],\n      tweetCounter: 0,\n      onPost: this.updateTweets.bind(this)\n    };\n  }\n\n  updateTweets(tweet) {\n    this.setState(prevState => {\n      return {\n        tweets: [tweet, ...prevState.tweets],\n        tweetCounter: ++prevState.tweetCounter\n      };\n    });\n  }\n\n  componentDidMount() {\n    getTweets().then(response => this.setState({\n      tweets: response.data.tweets\n    }));\n    this.fetchTweetsInterval = setInterval(() => {\n      getTweets().then(response => this.setState({\n        tweets: response.data.tweets\n      }));\n    }, 15000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.fetchTweetsInterval);\n  }\n\n  render() {\n    return React.createElement(TweetManagerContext.Provider, {\n      value: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(CreateTweet, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(TweetList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default TweetManager;","map":{"version":3,"sources":["/Users/ilannohayon/dev/ITC/Micro Blog/micro-blogging-front-end-Ilann0/blog/src/components/TweetManager.jsx"],"names":["React","TweetList","CreateTweet","getTweets","postTweet","TweetManagerContext","TweetManager","Component","constructor","props","state","tweets","tweetCounter","onPost","updateTweets","bind","tweet","setState","prevState","componentDidMount","then","response","data","fetchTweetsInterval","setInterval","componentWillUnmount","clearInterval","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,YAArC;AAGA,OAAOC,mBAAP,MAAgC,iCAAhC;;AAEA,MAAMC,YAAN,SAA2BN,KAAK,CAACO,SAAjC,CAA2C;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,EADC;AAETC,MAAAA,YAAY,EAAE,CAFL;AAGTC,MAAAA,MAAM,EAAE,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB;AAHC,KAAb;AAKH;;AAEDD,EAAAA,YAAY,CAACE,KAAD,EAAQ;AAChB,SAAKC,QAAL,CAAcC,SAAS,IAAI;AACvB,aAAO;AACJP,QAAAA,MAAM,EAAE,CAAEK,KAAF,EAAS,GAAGE,SAAS,CAACP,MAAtB,CADJ;AAEJC,QAAAA,YAAY,EAAE,EAAEM,SAAS,CAACN;AAFtB,OAAP;AAIH,KALD;AAMH;;AAEDO,EAAAA,iBAAiB,GAAG;AAChBhB,IAAAA,SAAS,GAAGiB,IAAZ,CAAiBC,QAAQ,IAAI,KAAKJ,QAAL,CAAc;AACnCN,MAAAA,MAAM,EAAEU,QAAQ,CAACC,IAAT,CAAcX;AADa,KAAd,CAA7B;AAIA,SAAKY,mBAAL,GAA2BC,WAAW,CAAC,MAAM;AACzCrB,MAAAA,SAAS,GAAGiB,IAAZ,CAAiBC,QAAQ,IAAI,KAAKJ,QAAL,CAAc;AACvCN,QAAAA,MAAM,EAAEU,QAAQ,CAACC,IAAT,CAAcX;AADiB,OAAd,CAA7B;AAGH,KAJqC,EAInC,KAJmC,CAAtC;AAKH;;AAEDc,EAAAA,oBAAoB,GAAG;AACnBC,IAAAA,aAAa,CAAC,KAAKH,mBAAN,CAAb;AACH;;AAEDI,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,mBAAD,CAAqB,QAArB;AAA8B,MAAA,KAAK,EAAG,KAAKjB,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH;;AA1CsC;;AA6C3C,eAAeJ,YAAf","sourcesContent":["import React from \"react\"\n\nimport TweetList from \"./TweetList\"\nimport CreateTweet from \"./CreateTweet\"\n\nimport { getTweets, postTweet } from '../lib/api'\n\n\nimport TweetManagerContext from \"../contexts/TweetManagerContext\"\n\nclass TweetManager extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            tweets: [],\n            tweetCounter: 0,\n            onPost: this.updateTweets.bind(this)\n        }\n    }\n\n    updateTweets(tweet) {\n        this.setState(prevState => {\n            return {\n               tweets: [ tweet, ...prevState.tweets ],\n               tweetCounter: ++prevState.tweetCounter\n            }\n        })\n    }\n\n    componentDidMount() {\n        getTweets().then(response => this.setState({\n                tweets: response.data.tweets,\n            }))\n        \n        this.fetchTweetsInterval = setInterval(() => {\n            getTweets().then(response => this.setState({\n                tweets: response.data.tweets,\n            }))\n        }, 15000)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.fetchTweetsInterval)\n    }\n\n    render() {\n        return (\n            <TweetManagerContext.Provider value={ this.state }>\n                <CreateTweet />\n                <TweetList />\n            </TweetManagerContext.Provider>\n        )\n    }\n}\n\nexport default TweetManager"]},"metadata":{},"sourceType":"module"}