{"ast":null,"code":"var _jsxFileName = \"/Users/ilannohayon/dev/ITC/Micro Blog/micro-blogging-front-end-Ilann0/blog/src/components/TweetManager.jsx\";\nimport React from \"react\";\nimport TweetList from \"./TweetList\";\nimport CreateTweet from \"./CreateTweet\";\nimport { getTweets, postTweet } from '../lib/api';\nimport TweetManagerContext from \"../contexts/TweetManagerContext\";\n\nclass TweetManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateTweets = this.updateTweets.bind(this);\n    this.state = {\n      tweets: [],\n      onPost: this.updateTweets\n    };\n  }\n\n  updateTweets(tweet) {\n    const timeStamp = new Date();\n    const tweetObj = {\n      content: tweet,\n      userName: 'Arnold Schwarzenegger',\n      date: timeStamp.toISOString()\n    };\n    postTweet(tweetObj).then(response => console.log(response)).catch(() => alert(\"We encountered a problem with the server.\\nPlease try again later :)\"));\n    this.setState(prevState => {\n      return {\n        tweets: [tweetObj, ...prevState.tweets]\n      };\n    });\n  }\n\n  updateData() {\n    getTweets().then(response => this.setState({\n      tweets: response.data.tweets\n    }, () => console.log(this.state))).catch(response => response.status > 399 && alert(\"We encountered a problem with the server.\\nPlease try again later :)\"));\n  }\n\n  componentDidMount() {\n    this.updateData();\n    this.fetchTweetsInterval = setInterval(this.updateData.bind(this), 10000);\n  }\n\n  componentWillUnmount() {\n    console.log('unmounted');\n    clearInterval(this.fetchTweetsInterval);\n  }\n\n  render() {\n    return React.createElement(TweetManagerContext.Provider, {\n      value: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(CreateTweet, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(TweetList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default TweetManager;","map":{"version":3,"sources":["/Users/ilannohayon/dev/ITC/Micro Blog/micro-blogging-front-end-Ilann0/blog/src/components/TweetManager.jsx"],"names":["React","TweetList","CreateTweet","getTweets","postTweet","TweetManagerContext","TweetManager","Component","constructor","props","updateTweets","bind","state","tweets","onPost","tweet","timeStamp","Date","tweetObj","content","userName","date","toISOString","then","response","console","log","catch","alert","setState","prevState","updateData","data","status","componentDidMount","fetchTweetsInterval","setInterval","componentWillUnmount","clearInterval","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,YAArC;AAGA,OAAOC,mBAAP,MAAgC,iCAAhC;;AAEA,MAAMC,YAAN,SAA2BN,KAAK,CAACO,SAAjC,CAA2C;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,EADC;AAETC,MAAAA,MAAM,EAAE,KAAKJ;AAFJ,KAAb;AAIH;;AAEDA,EAAAA,YAAY,CAACK,KAAD,EAAQ;AAChB,UAAMC,SAAS,GAAG,IAAIC,IAAJ,EAAlB;AACA,UAAMC,QAAQ,GAAG;AACbC,MAAAA,OAAO,EAAEJ,KADI;AAEbK,MAAAA,QAAQ,EAAE,uBAFG;AAGbC,MAAAA,IAAI,EAAEL,SAAS,CAACM,WAAV;AAHO,KAAjB;AAKAlB,IAAAA,SAAS,CAACc,QAAD,CAAT,CAAoBK,IAApB,CAA0BC,QAAD,IAAcC,OAAO,CAACC,GAAR,CAAYF,QAAZ,CAAvC,EACoBG,KADpB,CAC0B,MAAMC,KAAK,CAAC,sEAAD,CADrC;AAEA,SAAKC,QAAL,CAAcC,SAAS,IAAI;AACvB,aAAO;AACJjB,QAAAA,MAAM,EAAE,CAAEK,QAAF,EAAY,GAAGY,SAAS,CAACjB,MAAzB;AADJ,OAAP;AAGH,KAJD;AAKH;;AAEDkB,EAAAA,UAAU,GAAG;AACT5B,IAAAA,SAAS,GAAGoB,IAAZ,CAAiBC,QAAQ,IAAI,KAAKK,QAAL,CAAc;AACvChB,MAAAA,MAAM,EAAEW,QAAQ,CAACQ,IAAT,CAAcnB;AADiB,KAAd,EAE1B,MAAMY,OAAO,CAACC,GAAR,CAAY,KAAKd,KAAjB,CAFoB,CAA7B,EAEmCe,KAFnC,CAE0CH,QAAD,IAAeA,QAAQ,CAACS,MAAT,GAAkB,GAAlB,IAAyBL,KAAK,CAAC,sEAAD,CAFtF;AAGH;;AAEDM,EAAAA,iBAAiB,GAAG;AAChB,SAAKH,UAAL;AACA,SAAKI,mBAAL,GAA2BC,WAAW,CAAC,KAAKL,UAAL,CAAgBpB,IAAhB,CAAqB,IAArB,CAAD,EAA6B,KAA7B,CAAtC;AACH;;AAED0B,EAAAA,oBAAoB,GAAG;AACnBZ,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAY,IAAAA,aAAa,CAAC,KAAKH,mBAAN,CAAb;AACH;;AAEDI,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,mBAAD,CAAqB,QAArB;AAA8B,MAAA,KAAK,EAAG,KAAK3B,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH;;AAjDsC;;AAoD3C,eAAeN,YAAf","sourcesContent":["import React from \"react\"\n\nimport TweetList from \"./TweetList\"\nimport CreateTweet from \"./CreateTweet\"\n\nimport { getTweets, postTweet } from '../lib/api'\n\n\nimport TweetManagerContext from \"../contexts/TweetManagerContext\"\n\nclass TweetManager extends React.Component {\n    constructor(props) {\n        super(props)\n        this.updateTweets = this.updateTweets.bind(this)\n        this.state = {\n            tweets: [],\n            onPost: this.updateTweets\n        }\n    }\n\n    updateTweets(tweet) {\n        const timeStamp = new Date()\n        const tweetObj = {\n            content: tweet,\n            userName: 'Arnold Schwarzenegger',\n            date: timeStamp.toISOString(),\n        }\n        postTweet(tweetObj).then((response) => console.log(response))\n                           .catch(() => alert(\"We encountered a problem with the server.\\nPlease try again later :)\"))\n        this.setState(prevState => {\n            return {\n               tweets: [ tweetObj, ...prevState.tweets ],\n            }\n        })\n    }\n\n    updateData() {\n        getTweets().then(response => this.setState({\n            tweets: response.data.tweets,\n        }, () => console.log(this.state))).catch((response) => (response.status > 399 && alert(\"We encountered a problem with the server.\\nPlease try again later :)\")))\n    }\n\n    componentDidMount() {\n        this.updateData()\n        this.fetchTweetsInterval = setInterval(this.updateData.bind(this), 10000)\n    }\n\n    componentWillUnmount() {\n        console.log('unmounted')\n        clearInterval(this.fetchTweetsInterval)\n    }\n\n    render() {\n        return (\n            <TweetManagerContext.Provider value={ this.state }>\n                <CreateTweet />\n                <TweetList />\n            </TweetManagerContext.Provider>\n        )\n    }\n}\n\nexport default TweetManager"]},"metadata":{},"sourceType":"module"}